---
// Custom pill-shaped theme selector
---

<starlight-theme-select>
	<div class="theme-toggle-group">
		<button
			data-theme-toggle="auto"
			aria-label="Auto theme"
			title="Auto theme"
			class="theme-button"
		>
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
				<path d="M21 14h-1V7a3 3 0 0 0-3-3H7a3 3 0 0 0-3 3v7H3a1 1 0 0 0-1 1v2a3 3 0 0 0 3 3h14a3 3 0 0 0 3-3v-2a1 1 0 0 0-1-1ZM6 7a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7H6V7Zm14 10a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-1h16v1Z"/>
			</svg>
		</button>
		<button
			data-theme-toggle="light"
			aria-label="Light theme"
			title="Light theme"
			class="theme-button"
		>
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
				<path d="M5 12a1 1 0 0 0-1-1H3a1 1 0 0 0 0 2h1a1 1 0 0 0 1-1Zm.64 5-.71.71a1 1 0 0 0 0 1.41 1 1 0 0 0 1.41 0l.71-.71A1 1 0 0 0 5.64 17ZM12 5a1 1 0 0 0 1-1V3a1 1 0 0 0-2 0v1a1 1 0 0 0 1 1Zm5.66 2.34a1 1 0 0 0 .7-.29l.71-.71a1 1 0 1 0-1.41-1.41l-.66.71a1 1 0 0 0 0 1.41 1 1 0 0 0 .66.29Zm-12-.29a1 1 0 0 0 1.41 0 1 1 0 0 0 0-1.41l-.71-.71a1.004 1.004 0 1 0-1.43 1.41l.73.71ZM21 11h-1a1 1 0 0 0 0 2h1a1 1 0 0 0 0-2Zm-2.64 6A1 1 0 0 0 17 18.36l.71.71a1 1 0 0 0 1.41 0 1 1 0 0 0 0-1.41l-.76-.66ZM12 6.5a5.5 5.5 0 1 0 5.5 5.5A5.51 5.51 0 0 0 12 6.5Zm0 9a3.5 3.5 0 1 1 0-7 3.5 3.5 0 0 1 0 7Zm0 3.5a1 1 0 0 0-1 1v1a1 1 0 0 0 2 0v-1a1 1 0 0 0-1-1Z"/>
			</svg>
		</button>
		<button
			data-theme-toggle="dark"
			aria-label="Dark theme"
			title="Dark theme"
			class="theme-button"
		>
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
				<path d="M21.64 13a1 1 0 0 0-1.05-.14 8.049 8.049 0 0 1-3.37.73 8.15 8.15 0 0 1-8.14-8.1 8.59 8.59 0 0 1 .25-2A1 1 0 0 0 8 2.36a10.14 10.14 0 1 0 14 11.69 1 1 0 0 0-.36-1.05Zm-9.5 6.69A8.14 8.14 0 0 1 7.08 5.22v.27a10.15 10.15 0 0 0 10.14 10.14 9.784 9.784 0 0 0 2.1-.22 8.11 8.11 0 0 1-7.18 4.32v-.04Z"/>
			</svg>
		</button>
	</div>
</starlight-theme-select>

<style>
	.theme-toggle-group {
		display: flex;
		align-items: center;
		background-color: hsl(0, 0%, 98%);
		border: 1px solid hsl(0, 0%, 90%);
		border-radius: 50px;
		padding: 0.25rem;
		gap: 0.125rem;
	}

	.theme-button {
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 0.375rem;
		border-radius: 50%;
		border: none;
		background: transparent;
		cursor: pointer;
		color: var(--sl-color-gray-4);
		transition: all 0.2s ease;
		min-width: 2rem;
		min-height: 2rem;
	}

	.theme-button:hover {
		background-color: hsl(0, 0%, 94%);
		color: var(--sl-color-gray-2);
	}

	.theme-button[data-active] {
		background-color: hsl(0, 0%, 100%);
		color: var(--sl-color-gray-1);
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	}

	/* Dark mode */
	:global([data-theme='dark']) .theme-toggle-group {
		background-color: hsl(0, 0%, 10%);
		border-color: hsl(0, 0%, 20%);
	}

	:global([data-theme='dark']) .theme-button {
		color: var(--sl-color-gray-4);
	}

	:global([data-theme='dark']) .theme-button:hover {
		background-color: hsl(0, 0%, 15%);
		color: var(--sl-color-gray-2);
	}

	:global([data-theme='dark']) .theme-button[data-active] {
		background-color: hsl(0, 0%, 18%);
		color: var(--sl-color-white);
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
	}
</style>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
	StarlightThemeProvider.updatePickers();
</script>

<script>
	type Theme = 'auto' | 'dark' | 'light';

	/** Key in `localStorage` to store color theme preference at. */
	const storageKey = 'starlight-theme';

	/** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
	const parseTheme = (theme: unknown): Theme =>
		theme === 'auto' || theme === 'dark' || theme === 'light' ? theme : 'auto';

	/** Load the user's preference from `localStorage`. */
	const loadTheme = (): Theme =>
		parseTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey));

	/** Store the user's preference in `localStorage`. */
	function storeTheme(theme: Theme): void {
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '');
		}
	}

	/** Get the preferred system color scheme. */
	const getPreferredColorScheme = (): Theme =>
		matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';

	/** Update button UI, document theme, and local storage state. */
	function onThemeChange(theme: Theme): void {
		// Update button states
		document.querySelectorAll('[data-theme-toggle]').forEach((button) => {
			if (button instanceof HTMLElement) {
				if (button.dataset.themeToggle === theme) {
					button.setAttribute('data-active', '');
				} else {
					button.removeAttribute('data-active');
				}
			}
		});

		document.documentElement.dataset.theme = theme === 'auto' ? getPreferredColorScheme() : theme;
		storeTheme(theme);
	}

	// React to changes in system color scheme.
	matchMedia(`(prefers-color-scheme: light)`).addEventListener('change', () => {
		if (loadTheme() === 'auto') onThemeChange('auto');
	});

	class StarlightThemeSelect extends HTMLElement {
		constructor() {
			super();
			onThemeChange(loadTheme());

			// Add click handlers to all theme buttons
			this.querySelectorAll('[data-theme-toggle]').forEach((button) => {
				button.addEventListener('click', () => {
					if (button instanceof HTMLElement && button.dataset.themeToggle) {
						onThemeChange(parseTheme(button.dataset.themeToggle));
					}
				});
			});
		}
	}
	customElements.define('starlight-theme-select', StarlightThemeSelect);
</script>
